#  An environment is an atom referencing a map where keys are strings
#  instead of symbols.  The outer environment is the value associated
#  with the normally invalid :outer key.

#  Private helper for new-env.
bind-env(env b e):
  (if (empty? b)
    env
    (let* [b0 (first b)]
      (if (= '& b0)
        (assoc env (str (nth b 1)) e)
        (bind-env (assoc env (str b0) (first e)) (rest b) (rest e)))))))

new-env(& args):
  (if (<= (count args) 1)
    (atom {:outer (first args)})
    (atom (apply bind-env {:outer (first args)} (rest args))))))

env-find(env k):
  (env-find-str env (str k))))

#  Private helper for env-find and env-get.
env-find-str(env ks):
  (if env
    (let* [data @env]
      (if (contains? data ks)
        env
        (env-find-str (get data :outer) ks))))))

env-get(env k):
  (let* [ks (str k)
         e (env-find-str env ks)]
    (if e
      (get @e ks)
      (throw (str "'" ks "' not found"))))))

env-set(env k v):
  (do
    (swap! env assoc (str k) v)
    v)))
